
Lauflicht10Bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c9  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d1  00000000  00000000  00000a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ab  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ce  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008c  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
}


static inline void setup()
{
	DDRB = 0b00111111;
  90:	8f e3       	ldi	r24, 0x3F	; 63
  92:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b00111100;
  94:	8c e3       	ldi	r24, 0x3C	; 60
  96:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000011;
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	8b b9       	out	0x0b, r24	; 11
	direction = 1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <direction>
	aktBit = 0;
  a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
static inline void setSingleBit(uint8_t bit) {
	if(bit < 0 || bit>9) return;
	if (bit <= 5)
		PORTB |= (1 << bit);
	else
		PORTD |= (1 << ((bit%6)+2));
  a6:	7b ea       	ldi	r23, 0xAB	; 171
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	50 e0       	ldi	r21, 0x00	; 0

static int8_t direction;
static uint8_t aktBit;

static inline void clearOutput() {
	PORTD &= 0b11000011;
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	83 7c       	andi	r24, 0xC3	; 195
  b0:	8b b9       	out	0x0b, r24	; 11
	PORTB &= 0b11000000;
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	80 7c       	andi	r24, 0xC0	; 192
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	90 e0       	ldi	r25, 0x00	; 0

static inline void mainloop()
{
	clearOutput();
	for(int i = 0; i < 2; i ++){
		setSingleBit(aktBit+i*direction);
  ba:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <direction>
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c2:	92 9f       	mul	r25, r18
  c4:	80 0d       	add	r24, r0
  c6:	11 24       	eor	r1, r1
	PORTD &= 0b11000011;
	PORTB &= 0b11000000;
}

static inline void setSingleBit(uint8_t bit) {
	if(bit < 0 || bit>9) return;
  c8:	8a 30       	cpi	r24, 0x0A	; 10
  ca:	00 f5       	brcc	.+64     	; 0x10c <main+0x7c>
	if (bit <= 5)
  cc:	86 30       	cpi	r24, 0x06	; 6
  ce:	50 f4       	brcc	.+20     	; 0xe4 <main+0x54>
		PORTB |= (1 << bit);
  d0:	65 b1       	in	r22, 0x05	; 5
  d2:	9a 01       	movw	r18, r20
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x4a>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <main+0x46>
  de:	26 2b       	or	r18, r22
  e0:	25 b9       	out	0x05, r18	; 5
  e2:	14 c0       	rjmp	.+40     	; 0x10c <main+0x7c>
	else
		PORTD |= (1 << ((bit%6)+2));
  e4:	6b b1       	in	r22, 0x0b	; 11
  e6:	87 9f       	mul	r24, r23
  e8:	21 2d       	mov	r18, r1
  ea:	11 24       	eor	r1, r1
  ec:	26 95       	lsr	r18
  ee:	26 95       	lsr	r18
  f0:	32 2f       	mov	r19, r18
  f2:	33 0f       	add	r19, r19
  f4:	23 0f       	add	r18, r19
  f6:	22 0f       	add	r18, r18
  f8:	82 1b       	sub	r24, r18
  fa:	8e 5f       	subi	r24, 0xFE	; 254
  fc:	9a 01       	movw	r18, r20
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x74>
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <main+0x70>
 108:	26 2b       	or	r18, r22
 10a:	2b b9       	out	0x0b, r18	; 11
 10c:	9f 5f       	subi	r25, 0xFF	; 255
}

static inline void mainloop()
{
	clearOutput();
	for(int i = 0; i < 2; i ++){
 10e:	92 30       	cpi	r25, 0x02	; 2
 110:	a1 f6       	brne	.-88     	; 0xba <main+0x2a>
		setSingleBit(aktBit+i*direction);
	}
	
	
	aktBit+=direction;
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <direction>
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	89 0f       	add	r24, r25
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(aktBit < -1 || aktBit > 9)
 120:	8a 30       	cpi	r24, 0x0A	; 10
 122:	18 f0       	brcs	.+6      	; 0x12a <main+0x9a>
		direction *= -1;
 124:	91 95       	neg	r25
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	80 e7       	ldi	r24, 0x70	; 112
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xa0>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xaa>
 13a:	00 00       	nop
 13c:	b7 cf       	rjmp	.-146    	; 0xac <main+0x1c>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
