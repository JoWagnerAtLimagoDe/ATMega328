
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073b  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069e  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027e  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000379  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000077  00000000  00000000  00001665  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8e:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <putChar>:
#define USART_BAUDRATE 9600 
#define BAUD_PRESCALE (((F_CPU/(USART_BAUDRATE*16UL)))-1)

void putChar(uint8_t character) {
	// wait until the port is ready to be written to
	while( !( UCSR0A & ( 1 << UDRE0 ) )  );
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	95 ff       	sbrs	r25, 5
  9e:	fd cf       	rjmp	.-6      	; 0x9a <putChar+0x4>
	// write the byte to the serial port
	UDR0 = character;
  a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a4:	08 95       	ret

000000a6 <receiveChar>:
}

uint8_t receiveChar() {
	// wait until a byte is ready to read
	while( ( UCSR0A & ( 1 << RXC0 ) ) == 0 ){}
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 23       	and	r24, r24
  ae:	ec f7       	brge	.-6      	; 0xaa <receiveChar+0x4>
	// grab the byte from the serial port
	return UDR0;	
  b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  b4:	08 95       	ret

000000b6 <putString>:
   
void putString(char * text) {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
	while(*text) {
  bc:	88 81       	ld	r24, Y
  be:	88 23       	and	r24, r24
  c0:	31 f0       	breq	.+12     	; 0xce <putString+0x18>
  c2:	21 96       	adiw	r28, 0x01	; 1
		putChar(*text++);
  c4:	0e 94 4b 00 	call	0x96	; 0x96 <putChar>
	// grab the byte from the serial port
	return UDR0;	
}
   
void putString(char * text) {
	while(*text) {
  c8:	89 91       	ld	r24, Y+
  ca:	81 11       	cpse	r24, r1
  cc:	fb cf       	rjmp	.-10     	; 0xc4 <putString+0xe>
		putChar(*text++);
	}
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <main>:
   
int main(void){  
	char recieved_byte;     
	UCSR0B |= (1<<RXEN0)  | (1<<TXEN0);  
  d4:	e1 ec       	ldi	r30, 0xC1	; 193
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 61       	ori	r24, 0x18	; 24
  dc:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);  
  de:	e2 ec       	ldi	r30, 0xC2	; 194
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	86 60       	ori	r24, 0x06	; 6
  e6:	80 83       	st	Z, r24
	UBRR0H  = (BAUD_PRESCALE >> 8);  
  e8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L  = BAUD_PRESCALE;  
  ec:	87 e6       	ldi	r24, 0x67	; 103
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	putString("Hallo Putty\n\r");      
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <putString>
	while(1){   
		   
			recieved_byte = receiveChar();
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <receiveChar>
		 
			putChar(recieved_byte);
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <putChar>
 102:	fb cf       	rjmp	.-10     	; 0xfa <main+0x26>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
