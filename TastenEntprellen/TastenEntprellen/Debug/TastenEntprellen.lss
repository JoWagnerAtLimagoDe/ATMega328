
TastenEntprellen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000018a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006da  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000626  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024e  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
static volatile uint16_t flag = 0;
static volatile uint16_t increment = 0;


ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
	flag = 0;
  9a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  9e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	//TCNT0 = 90;
	//PORTB=~PORTB;
}
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_1>:


ISR (INT0_vect)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	if (flag == 0) {
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c2:	89 2b       	or	r24, r25
  c4:	51 f4       	brne	.+20     	; 0xda <__vector_1+0x2e>
		flag = 1;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		//TCNT0 = 90;
		TCNT0 = 0;
  d2:	16 bc       	out	0x26, r1	; 38
		PORTB=~PORTB;
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	80 95       	com	r24
  d8:	85 b9       	out	0x05, r24	; 5
	
	
	 
	 
	
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <main>:


int main(void)
{
	
	DDRB=0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 b9       	out	0x04, r24	; 4
	PORTB=0xFF;
  ec:	85 b9       	out	0x05, r24	; 5
	
	DDRD &= ~(1 << DDD2);     // Clear the PD2 pin
  ee:	52 98       	cbi	0x0a, 2	; 10
	// PD2 (PCINT0 pin) is now an input

	PORTD |= (1 << PORTD2);    // turn On the Pull-up
  f0:	5a 9a       	sbi	0x0b, 2	; 11
	 //TCCR0A |= (1 << WGM01);

	 // Set the value that you want to count to
	 //OCR0A = 156;

	 TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vect
  f2:	ee e6       	ldi	r30, 0x6E	; 110
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24

	


	 TCCR0B |= (1 << CS02) | (1 << CS00);
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	85 60       	ori	r24, 0x05	; 5
 100:	85 bd       	out	0x25, r24	; 37
	 // set prescaler to 1024 and start the timer

	EICRA |= (1 << ISC01)|(1 << ISC00);    // set INT0 to trigger on rising edge
 102:	e9 e6       	ldi	r30, 0x69	; 105
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24

	EIMSK |= (1 << INT0);     // Turns on INT0
 10c:	e8 9a       	sbi	0x1d, 0	; 29
	
	sei();                    // turn on interrupts
 10e:	78 94       	sei
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x28>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
